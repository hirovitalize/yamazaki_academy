.col-md-4
  = f.input :id_in
  .pull-right
    = render 'shared/action/select_all_button', options: { data: { target: '#q_students_course_category_students_course_category_id_in' } }
  = f.input :students_course_category_students_course_category_id_in, label: t_model(CourseCategory),
     as: :select,
     collection: CourseCategory.all,
     input_html: { multiple: true }

.col-md-4
  .pull-right
    = render 'shared/action/mine_button', options: { data: { staff_target: '#q_staffs_id_in' } }
  = f.input :staffs_id_in, label: t_field(Lecture, :staffs),
    as: :autocomplete,
    collection: Staff.where(id: f.object.staffs_id_in),
    input_html: { multiple: true, data: { placeholder: '氏名・コードを入力（1文字以上）', minimum_input_length: 1, limit: 20, models: 'staffs', mainquery: 'name_or_code_start' }}
  = f.input :students_id_in, label: t_field(Lecture, :students),
    as: :autocomplete,
    collection: Student.where(id: f.object.students_id_in),
    input_html: { multiple: true, data: { models: 'students', mainquery: 'name_or_code_start' }}
  = f.input :without_staff_work_kind, label: t(".absent"),
    as: :select,
    collection: WorkKind.all.pluck(:name, :id)
  = f.input :start_time, label: t(".lecture_duration_time") do
    .form-inline
      = f.input :start_time_gteq, { \
        as: :datetime,
        wrapper: :inline_form,
        input_html: { data: { toggle: 'autofill_date', autofill: { to: '#q_finish_time_lteq', added_days: 1, date_format: 'YYYY/MM/DD HH:mm'} } } \
      }
      span.m-1 -
      = f.input :finish_time_lteq, { \
        as: :datetime,
        wrapper: :inline_form,
        input_html: { data: { toggle: 'autofill_date', autofill: { to: '#q_start_time_gteq', added_days: -1, date_format: 'YYYY/MM/DD HH:mm'} } } \
      }

  = f.input :canceled_status_in, label: t_field(Lecture, :canceled_status),
            collection: ransack_enum_collection(Lecture, :canceled_status),
            input_html: { multiple: true }

  = f.input :cached_tag_list_cont, label: t_field(Lecture, :tags),
    as: :select,
    collection: ActsAsTaggableOn::Tag.all.pluck(:name, :name)

.col-md-4.d-flex.flex-column
  = f.input :not_reserved, label: t_model(:reserve),
    as: :check_boxes, include_hidden: false,
    collection: [[t(".notyet_reservation"), true]]


  = f.input :confirmed_in, label: t_field(Lecture, :confirmed),
    as: :check_boxes,
    collection: ransack_enum_collection(Lecture, :confirmed),
    input_html: { multiple: true }

  - if 0 < @q.result.count && @q.result.count <= 1000
    = f.input :with_staff_double_booking, label: "スタッフ",
      as: :check_boxes, include_hidden: false,
      collection: [[t(".double_checking"), true]]

  = f.input :not_klass_subject_not_pesonal, label: "イレギュラー授業",
    as: :check_boxes, include_hidden: false,
    collection: [[t(".not_klass_subject_not_pesonal"), true]]


  - if params.dig(:q, :klass_subject_id_in).present? && @q.result.count <= 3
    = f.input :klass_subject_id_in, label: t_field(Lecture, :klass_subject)

  - if 0 < @q.result.count && @q.result.count <= 30
    .mt-auto
      button.btn.btn-success.btn-rounded.pull-right.m-r-lg[type='submit' name='duplicate_lectures']
        => fa_icon :copy
        =<> t(".bundle_duplication_in_a_week")
